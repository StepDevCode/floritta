generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  email    String @unique
  phone    String
  name     String
  login    String
  password String

  provider   String?
  providerId String?

  verified         DateTime?
  verificationCode VerificationCode?

  role UserRole @default(USER)

  cart   Cart?
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  title    String
  imageUrl String

  variations Variation[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variation {
  id Int @id @default(autoincrement())

  price Int
  size  String?
  color String?

  cartItems CartItem[]

  products  Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  token       String
  totalAmount Int    @default(0)

  items CartItem[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  quantity Int @default(1)

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  variation   Variation @relation(fields: [variationId], references: [id])
  variationId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  name        String
  phone       String
  address     String
  comment     String?
  totalAmount Float

  token     String
  paymentId String?

  items  Json
  status OrderStatus

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
